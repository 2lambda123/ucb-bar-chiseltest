package chisel3.tests

import org.scalatest._

import chisel3._
import chisel3.tester._

class BundleLiteralSpec extends FlatSpec with ChiselScalatestTester {
  behavior of "Testers2"

  class DoubleElements extends Bundle {
    val a = UInt(8.W)
    val b = UInt(8.W)

    // IGNORE THIS - this is some boilerplate Bundle Literals code
    // and would be auto-generated by an upcoming feature
    def Lit(aVal: UInt, bVal: UInt) = {
      import chisel3.core.BundleLitBinding
      val clone = cloneType
      clone.selfBind(BundleLitBinding(Map(
        clone.a -> litArgOfBits(aVal),
        clone.b -> litArgOfBits(bVal)
      )))
      clone
    }
  }

  it should "poke Bundle literals" in {
    test(new Module {
      val io = IO(new Bundle {
        val in = Input(new DoubleElements)

        val aOut = Output(UInt(8.W))
        val bOut = Output(UInt(8.W))
      })
      io.aOut := io.in.a
      io.bOut := io.in.b
    }) { c =>
      c.io.in.poke(c.io.in.Lit(0.U, 1.U))
      c.io.aOut.expect(0.U)
      c.io.bOut.expect(1.U)

      c.io.in.poke(c.io.in.Lit(2.U, 5.U))
      c.io.aOut.expect(2.U)
      c.io.bOut.expect(5.U)
    }
  }

  it should "expect Bundle literals" in {
    test(new PassthroughModule(new DoubleElements)) { c =>
      c.in.poke(c.in.Lit(0.U, 1.U))
      c.out.expect(c.in.Lit(0.U, 1.U))
      c.in.poke(c.in.Lit(2.U, 5.U))
      c.out.expect(c.in.Lit(2.U, 5.U))
    }
  }

  it should "fail on expect mismatch" in {
    assertThrows[exceptions.TestFailedException] {
      test(new PassthroughModule(new DoubleElements)) { c =>
        c.in.poke(c.in.Lit(0.U, 1.U))
        c.out.expect(c.in.Lit(0.U, 2.U))
      }
    }
  }

  ignore should "peek Bundle literals" in {
    // TODO to be written
  }
}
