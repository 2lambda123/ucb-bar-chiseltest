// SPDX-License-Identifier: Apache-2.0

package chiseltest.simulator

import chiseltest.coverage.{CoverCounterAnnotation, ModuleInstancesAnnotation, SimulationCoverageCounterPass}
import firrtl._
import firrtl.annotations._
import chiseltest.simulator.jna._
import firrtl.options.Dependency
import firrtl.stage.RunFirrtlTransformAnnotation

case object VerilatorBackendAnnotation extends SimulatorAnnotation {
  override def getSimulator: Simulator = VerilatorSimulator
}

/** verilator specific options */
trait VerilatorOption extends NoTargetAnnotation

/** adds flags to the invocation of verilator */
case class VerilatorFlags(flags: Seq[String]) extends VerilatorOption

/** adds flags to the C++ compiler in the Makefile generated by verilator */
case class VerilatorCFlags(flags: Seq[String]) extends VerilatorOption

/** adds flags to the linker in the Makefile generated by verilator */
case class VerilatorLinkFlags(flags: Seq[String]) extends VerilatorOption

private object VerilatorSimulator extends Simulator {
  override def name: String = "verilator"

  /** is this simulator installed on the local machine? */
  override def isAvailable: Boolean = {
    val binaryFound = os.proc("which", "verilator").call().exitCode == 0
    binaryFound && majorVersion >= 4
  }

  override def supportsCoverage = true
  override def supportsLiveCoverage = true
  override def waveformFormats = Seq(WriteVcdAnnotation, WriteFstAnnotation)

  /** search the local computer for an installation of this simulator and print versions */
  def findVersions(): Unit = {
    if (isAvailable) {
      val (maj, min) = version
      println(s"Found Verilator $maj.$min")
    }
  }

  // example version string: Verilator 4.038 2020-07-11 rev v4.038
  private lazy val version: (Int, Int) = { // (major, minor)
    val versionSplitted = os.proc("verilator", "--version").call().out.trim.split(' ')
    assert(
      versionSplitted.length > 1 && versionSplitted.head == "Verilator",
      s"Unknown verilator version string: ${versionSplitted.mkString(" ")}"
    )
    val Array(majStr, minStr) = versionSplitted(1).split('.').map(_.trim)
    assert(majStr.length == 1 && minStr.length == 3, s"$majStr.$minStr is not of the expected format: D.DDD")
    val (maj, min) = (majStr.toInt, minStr.toInt)
    // println(s"Detected Verilator version $maj.$min")
    (maj, min)
  }

  private def majorVersion: Int = version._1
  private def minorVersion: Int = version._2

  /** start a new simulation
    *
    * @param state LoFirrtl circuit + annotations
    */
  override def createContext(state: CircuitState): SimulatorContext = {
    val simName = s"${VerilatorSimulator.name} ${VerilatorSimulator.majorVersion}.${VerilatorSimulator.minorVersion}"
    Caching.cacheSimulationBin(simName, state, createContextFromScratch, recreateCachedContext)
  }

  private def recreateCachedContext(state: CircuitState): SimulatorContext = {
    // we will create the simulation in the target directory
    val targetDir = Compiler.requireTargetDir(state.annotations)
    val toplevel = TopmoduleInfo(state.circuit)

    val coverageAnnos = getCoverageAnnos(targetDir, None)
    val coverageCounters = SimulationCoverageCounterPass.getCounterNames(coverageAnnos)
    val libPath = targetDir / "verilated" / ("V" + toplevel.name)
    val lib = JNAUtils.compileAndLoadJNAClass(libPath, coverageCounters.length)
    new JNASimulatorContext(lib, targetDir, toplevel, VerilatorSimulator, coverageCounters)
  }

  private val CoveragePasses = Seq(
    RunFirrtlTransformAnnotation(Dependency(chiseltest.coverage.SimulationCoverageCounterPass)),
    RunFirrtlTransformAnnotation(Dependency(chiseltest.coverage.ModuleInstancesPass))
  )

  private def createContextFromScratch(state: CircuitState): SimulatorContext = {
    // we will create the simulation in the target directory
    val targetDir = Compiler.requireTargetDir(state.annotations)
    val toplevel = TopmoduleInfo(state.circuit)

    // compile low firrtl to System Verilog for verilator to use
    val verilogState = Compiler.lowFirrtlToSystemVerilog(state, CoveragePasses)

    // Create the header files that verilator needs + a custom harness
    val waveformExt = Simulator.getWavformFormat(state.annotations)
    val coverageAnnos = getCoverageAnnos(targetDir, Some(verilogState.annotations))
    val coverageCounters = SimulationCoverageCounterPass.getCounterNames(coverageAnnos)
    val cppHarness = generateHarness(targetDir, toplevel, waveformExt, coverageCounters)

    // ensure that coverage counters can be accessed
    val coverTargets = coverageAnnos.collect { case CoverCounterAnnotation(target) =>
      PublicSignal(target.module, target.ref, readOnly = true)
    }

    // turn SystemVerilog into C++ simulation
    val verilatedDir = runVerilator(toplevel.name, targetDir, cppHarness, state.annotations, coverTargets)

    // compile simulation and load trhough JNA
    val libPath = compileSimulation(topName = toplevel.name, verilatedDir)
    val lib = JNAUtils.compileAndLoadJNAClass(libPath, coverageCounters.length)
    new JNASimulatorContext(lib, targetDir, toplevel, VerilatorSimulator, coverageCounters)
  }

  private def getCoverageAnnos(targetDir: os.Path, a: Option[AnnotationSeq]): AnnotationSeq = a match {
    case Some(annos) =>
      // filter out the annotations that we care about
      val coverageAnnos = annos.collect {
        case a: CoverCounterAnnotation    => a
        case a: ModuleInstancesAnnotation => a
      }
      // if caching is enabled we want to save these annotations to disk
      if (Caching.shouldCache(annos)) {
        os.write.over(targetDir / "coverageAnnotations.json", JsonProtocol.serialize(annos))
      }
      // return annos
      coverageAnnos
    case None => // if we do not have any annotations, we need to lead them from disk
      JsonProtocol.deserialize((targetDir / "coverageAnnotations.json").toIO)
  }

  private def writeConfigFile(verilatedDir: os.Path, publicSignals: Iterable[PublicSignal]): Unit = {
    // see Verilator Manual section on "Configuration Files"
    val makePublic = publicSignals.map { signal =>
      val suffix = if (signal.readOnly) "rd" else "rw"
      s"""public_flat_$suffix -module "${signal.module}" -var "${signal.name}""""
    }
    val content = "`verilator_config\n" + makePublic.mkString("\n") + "\n"
    os.write.over(verilatedDir / "config.vlt", content)
  }

  private def compileSimulation(topName: String, verilatedDir: os.Path): os.Path = {
    val target = s"V$topName"
    val cmd = Seq("make", "-C", verilatedDir.toString(), "-j", "-f", s"V$topName.mk", target)
    val ret = os.proc(cmd).call()
    assert(
      ret.exitCode == 0,
      s"Compilation of verilator generated code failed for circuit $topName in work dir $verilatedDir"
    )
    val simBinary = verilatedDir / target
    assert(os.exists(simBinary), s"Failed to generate simulation binary: $simBinary")
    simBinary
  }

  /** executes verilator in order to generate a C++ simulation */
  private def runVerilator(
    topName:       String,
    targetDir:     os.Path,
    cppHarness:    String,
    annos:         AnnotationSeq,
    publicSignals: Iterable[PublicSignal]
  ): os.Path = {
    val verilatedDir = targetDir / "verilated"

    removeOldCode(verilatedDir)
    writeConfigFile(verilatedDir, publicSignals)
    val flagAnnos = VerilatorLinkFlags(JNAUtils.ldFlags) +: VerilatorCFlags(JNAUtils.ccFlags) +: annos
    val flags = generateFlags(topName, verilatedDir, flagAnnos)
    val cmd = List("verilator", "--cc", "--exe", cppHarness) ++ flags ++ List("verilated/config.vlt", s"$topName.sv")
    val ret = os.proc(cmd).call(cwd = targetDir)

    assert(ret.exitCode == 0, s"verilator command failed on circuit ${topName} in work dir $targetDir")
    verilatedDir
  }

  private def removeOldCode(verilatedDir: os.Path): Unit = {
    if (os.exists(verilatedDir)) {
      println(s"Deleting stale Verilator object directory: $verilatedDir")
      os.remove.all(verilatedDir)
    }
    os.makeDir(verilatedDir)
  }

  private def DefaultCFlags(topName: String) = List(
    "-O1",
    "-DVL_USER_FINISH", // this is required because we ant to overwrite the vl_finish function!
    s"-DTOP_TYPE=V$topName",
    s"-include V$topName.h"
  )

  private def DefaultFlags(topName: String, verilatedDir: os.Path, cFlags: Seq[String], ldFlags: Seq[String]) = List(
    "--assert", // we always enable assertions
    "-Wno-fatal",
    "-Wno-WIDTH",
    "-Wno-STMTDLY",
    "--top-module",
    topName,
    "+define+TOP_TYPE=V" + topName,
    // flags passed to the C++ compiler
    "-CFLAGS",
    cFlags.mkString(" "),
    // name of the directory that verilator generates the C++ model + Makefile in
    "-Mdir",
    verilatedDir.toString()
  ) ++ (if (ldFlags.nonEmpty) Seq("-LDFLAGS", ldFlags.mkString(" ")) else Seq())

  // documentation of Verilator flags: https://verilator.org/guide/latest/exe_verilator.html#
  private def generateFlags(topName: String, verilatedDir: os.Path, annos: AnnotationSeq): Seq[String] = {
    val waveformExt = Simulator.getWavformFormat(annos)

    // generate C flags
    val userCFlags = annos.collect { case VerilatorCFlags(f) => f }.flatten
    // some older versions of Verilator seem to not set VM_TRACE_FST correctly, thus:
    val fstCFlag = if (waveformExt == "fst") Seq("-DVM_TRACE_FST=1") else Seq()
    val cFlags = DefaultCFlags(topName) ++ fstCFlag ++ userCFlags
    val ldFlags = annos.collect { case VerilatorLinkFlags(f) => f }.flatten

    // combine all flags
    val userFlags = annos.collectFirst { case VerilatorFlags(f) => f }.getOrElse(Seq.empty)
    val waveformFlags = waveformExt match {
      case "vcd" => List("--trace")
      case "fst" => List("--trace-fst")
      case ""    => List()
      case other => throw new RuntimeException(s"Unsupported waveform format: $other")
    }
    val flags = DefaultFlags(topName, verilatedDir, cFlags, ldFlags) ++ waveformFlags ++ userFlags
    flags
  }

  private def generateHarness(
    targetDir:        os.Path,
    toplevel:         TopmoduleInfo,
    waveformExt:      String,
    coverageCounters: List[String]
  ): String = {
    val topName = toplevel.name

    // create a custom c++ harness
    val cppHarnessFileName = s"${topName}-harness.cpp"
    val vcdFile = targetDir / (s"$topName." + waveformExt)
    val code = VerilatorCppJNAHarnessGenerator.codeGen(
      toplevel,
      vcdFile,
      targetDir,
      majorVersion = majorVersion,
      minorVersion = minorVersion,
      coverageCounters = coverageCounters
    )
    os.write.over(targetDir / cppHarnessFileName, code)

    cppHarnessFileName
  }
}

private case class PublicSignal(module: String, name: String, readOnly: Boolean)
